Description: This is a silly Discord bot.

Parameters:
  PaywallBotToken:
    Type: String
    Default: Get it from Discord if you don't have it. Don't just make it up.
    Description: Enter the token for your paywall bot.

Resources:

  PaywallBotTokenParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: PaywallBot Token
      Name: paywallbot-token
      Type: String
      Value: !Ref PaywallBotToken

  PaywallBotTokenStreamNameParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: PaywallBot Stream Name
      Name: paywallbot-stream-name
      Type: String
      Value: !Ref KinesisDataStreamPaywall      

  PaywallTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: PaywallBotPaywall
      AttributeDefinitions: 
        - AttributeName: guild_id
          AttributeType: N
        - AttributeName: paywall_url
          AttributeType: S          
      KeySchema: 
        - AttributeName: guild_id
          KeyType: HASH   
        - AttributeName: paywall_url
          KeyType: RANGE        
      Tags:
          - Key: Vendor
            Value: PaywallBot
          - Key: Name
            Value: PaywallBotPaywall

  EmojiTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: PaywallBotEmoji 
      AttributeDefinitions: 
        - AttributeName: guild_id
          AttributeType: N
        - AttributeName: emoji_id
          AttributeType: N          
      KeySchema: 
        - AttributeName: guild_id
          KeyType: HASH   
        - AttributeName: emoji_id
          KeyType: RANGE         
      Tags:
          - Key: Vendor
            Value: PaywallBot
          - Key: Name
            Value: PaywallBotEmoji         

  ReplyTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: PaywallBotReply 
      AttributeDefinitions: 
        - AttributeName: guild_id
          AttributeType: N
        - AttributeName: reply
          AttributeType: S          
      KeySchema: 
        - AttributeName: guild_id
          KeyType: HASH   
        - AttributeName: reply
          KeyType: RANGE         
      Tags:
          - Key: Vendor
            Value: PaywallBot
          - Key: Name
            Value: PaywallBotReply  

  BlockedUserTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: PaywallBotBlockedUser
      AttributeDefinitions: 
        - AttributeName: guild_id
          AttributeType: N
        - AttributeName: user_id
          AttributeType: N        
      KeySchema: 
        - AttributeName: guild_id
          KeyType: HASH   
        - AttributeName: user_id
          KeyType: RANGE         
      Tags:
          - Key: Vendor
            Value: PaywallBot
          - Key: Name
            Value: PaywallBotBlockedUser                              

  PaywallBotTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:  
              - Effect: Allow
                Action: "dynamodb:*"
                #arnrewrite
                Resource: 
                  - !GetAtt PaywallTable.Arn
                  - !GetAtt EmojiTable.Arn
                  - !GetAtt ReplyTable.Arn
                  - !GetAtt BlockedUserTable.Arn
              - Effect: Allow
                Action: "ssm:*"
                #arnrewrite
                Resource: 
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/paywallbot-token 
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/paywallbot-stream-name   
              - Effect: Allow
                Action: "kinesis:*"
                Resource:
                  - !GetAtt KinesisDataStreamPaywall.Arn              
      Tags:
          - Key: Vendor
            Value: PaywallBot
          - Key: Name
            Value: PaywallBotTaskRole            

  S3BucketPaywalls:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AWS::AccountId}-paywallbot"
      Tags:
        - Key: Vendor
          Value: PaywallBot
      PublicAccessBlockConfiguration:
        BlockPublicAcls : true
        BlockPublicPolicy : true
        IgnorePublicAcls : true
        RestrictPublicBuckets : true

  KinesisDataStreamPaywall:
    Type: AWS::Kinesis::Stream
    Properties: 
      Name: !Sub "${AWS::AccountId}-paywallbot-stream"
      RetentionPeriodHours: 24
      ShardCount: 1
      Tags: 
        - Key: Vendor
          Value: PaywallBot
        - Key: Name
          Value: !Sub "${AWS::AccountId}-paywallbot-stream"     

  KinesisFirehosePaywall:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties: 
      DeliveryStreamName: !Sub "${AWS::AccountId}-paywallbot-firehose"
      DeliveryStreamType: KinesisStreamAsSource
      KinesisStreamSourceConfiguration: 
        KinesisStreamARN: !GetAtt KinesisDataStreamPaywall.Arn
        RoleARN: !GetAtt KinesisSourceIAMRole.Arn
      S3DestinationConfiguration: 
        BucketARN: !GetAtt S3BucketPaywalls.Arn
        RoleARN: !GetAtt FirehoseDeliveryIAMRole.Arn
        BufferingHints:
          IntervalInSeconds: 300
          SizeInMBs: 5
      Tags: 
        - Key: Vendor
          Value: PaywallBot
        - Key: Name
          Value: !Sub "${AWS::AccountId}-paywallbot-firehose"         

  KinesisSourceIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: firehose.amazonaws.com
          Action: sts:AssumeRole
      Tags:
        - Key: Vendor
          Value: mpows
        - Key: Name
          Value: !Sub "mpows-${AWS::AccountId}-kinesis-role"            
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "kinesis:*"
                Resource: !GetAtt KinesisDataStreamPaywall.Arn         
                
  FirehoseDeliveryIAMRole:
    Type: AWS::IAM::Role 
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: firehose.amazonaws.com
          Action: sts:AssumeRole
      Tags:
        - Key: Vendor
          Value: PaywallBot
        - Key: Name
          Value: !Sub "mpows-${AWS::AccountId}-firehose-role"           
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "s3:*"
                Resource: !GetAtt S3BucketPaywalls.Arn                 